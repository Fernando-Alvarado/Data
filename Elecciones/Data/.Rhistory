#Función que simula el tope del caminante en el punto 0 y N (con proba p y 1-p de quedarse o irese)
tope_caminante  <- function(p, estado, N){#Parametro p que es la probabilidad moverse al estado 1 o N-1, estado que es el estado actual del caminante si es 0 o N
if(runif(1) < p) {
if(estado == 0){#Si el estado es 0 se mueve a la derecha, si no a la izquierda
return(1)
} else if(estado == N) {
return(-1)
}
} else {
return(0)
}
}
#Función que simula el proceso del caminante con topes en 0 y N
proceso_caminante  <- function(N,p, n){#Parametros N: size de nuestra CM, p: probabilidad en los topes, n: numero de pasos que se desee simular, inicioCaminante: punto de inicio de nuestro caminante, este parametro es opcional
estadoActual  <-  0 #Fijando el estado inicial de la caminata
caminata  <- c( tope_caminante(p, estadoActual, N))
for(i in 2:n){ #Ciclo que simula los pasos de la caminata
if(caminata[length(caminata)] == 0 | caminata[length(caminata)] == N){ # nolint: line_length_linter.
estadoActual  <- caminata[length(caminata)] +  tope_caminante(p, caminata[length(caminata)], N ) #Redefinimos nuestro estado final
caminata  <- c(caminata,estadoActual)
} else if(caminata[length(caminata)] > 0 & caminata[length(caminata)] < N){
estadoActual  <- caminata[length(caminata)]+  salto_caminante() #Redefinimos nuestro estado final
caminata  <- c(caminata,estadoActual)
}
}
return(caminata)
}
#Obs, si agrego otra proceso cambie el nombre en la grafica de abajo, para que no haya problemas
#Ejemplo de simulación de la caminata con topes en 0 y N, se puede modificar pero no reenombre la variable, para que la grafica pueda salir sin ningun problema
proceso1  <- proceso_caminante(10, .3, 100) #Simulación de la caminata con topes en 0 y 10 con probabilidad de 0.5 de quedarse en los topes y 100 pasos
proceso2 <- proceso_caminante(10, .5, 100) #Simulación de la caminata con topes en 0 y 10 con probabilidad de 0.5 de quedarse en los topes y 100 pasos
proceso3 <- proceso_caminante(10, .7, 100)
vector_a_graficar <- proceso2 #Vector que se graficara, si se quiere cambiar por otro vector, cambiar el nombre en la grafica de abajo
#Creando la grafica
grafica_Proceso  <- function(data, mensaje = ""){
ggplot(data, aes(x = Paso, y = Caminata)) +
geom_line() + #Parametro para pasar que grafica quiero poner
labs(title = paste("Caminata aleatoria con topes en 0 y N", mensaje), x = "Tiempo, X_n", y = " Estados") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
#Graficando la caminata aleatoria 1
grafica1 <- grafica_Proceso( data.frame(Paso = 1:length(proceso1), Caminata = proceso1), "Con proba p=.3" ) #Grafica de la caminata aleatoria
#Graficando la caminata aleatoria 1
grafica2 <- grafica_Proceso( data.frame(Paso = 1:length(proceso2), Caminata = proceso2), "Con proba p=.5") #Grafica de la caminata aleatoria
#Graficando la caminata aleatoria 1
grafica3 <- grafica_Proceso( data.frame(Paso = 1:length(proceso3), Caminata = proceso3), "Con proba p=.7") #Grafica de la caminata aleatoria
#Mostrando la grafica
grafica1
grafica2
grafica3
#Usando el metodo de Monte Carlo para obtener la distribucion estacionaria  de nuestro proceso
#-------- Recomiendo ejecutar esto por separado ya que luego se rompe R y no muestra bien las graficas
#Haciedno muchas iteraciones de nueestras caminatas
iteraciones  <- 100
#Viendo los estados finales de nuestras caminatas
lista_de_estados  <- c()
for(i in 1:iteraciones){
proceso_CM <- proceso_caminante(10, .3, 100)
lista_de_estados <- c(lista_de_estados, proceso_CM )
}
tabla  <- table(lista_de_estados)
print(tabla) #Distribucion de estados finales de nuestras caminatas
#Graficando la distribucion de estados final de nuestras caminatas
tabla_df <- as.data.frame(table(lista_de_estados))
names(tabla_df) <- c("Estado", "Frecuencia")
# Crear un gráfico de barras
ggplot(tabla_df, aes(x = Estado, y = Frecuencia)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de los resultados Finales , donde tomamos p=0.3", x = "Valores", y = "Total")
#Con el metodo de Montecarlo Aproximando una distribucion estacioanriaa de nuestro proceso
frecuencias_relativas <- tabla/(iteraciones*100)
frecuencias_relativas
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"varx" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=varx)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"varx" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=varx)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(100))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
#Haciendo la grafica de nuestras variables aleatorias
data  <- data.frame(variables_aleatorias(1000))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(MASS)
summary(Cars93)
print(data.model)
print(data$Weight)
print(Cars93$Weight)
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
library(ggplot2)
variables_aleatorias  <- function(n){
x <- runif(n, 0, 1)
y <- runif(n, 0, 1)
return(list("varx" =x,"vary" = y))
}
data  <- data.frame(variables_aleatorias(1000))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
data  <- data.frame(variables_aleatorias(10000))
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
data  <- data.frame(variables_aleatorias(1000))
data  <- data.frame(variables_aleatorias(1000))
print(data)
#haciedno la grafia de nuestras variables aleatorias
ggplot(data, aes(x=varx, y=vary)) + geom_point() + theme_minimal()
#Hagamos sus calculos de su media y varianza
# Calcular la media de varx y vary
media_varx <- mean(data$varx)
media_vary <- mean(data$vary)
# Calcular la varianza de varx y vary
varianza_varx <- var(data$varx)
varianza_vary <- var(data$vary)
# Calcular la desviación estándar de varx y vary
desviacion_varx <- sd(data$varx)
desviacion_vary <- sd(data$vary)
# Imprimir los resultados
print(paste("Media de varx: ", media_varx))
print(paste("Media de vary: ", media_vary))
print(paste("Varianza de varx: ", varianza_varx))
print(paste("Varianza de vary: ", varianza_vary))
print(paste("Desviación estándar de varx: ", desviacion_varx))
print(paste("Desviación estándar de vary: ", desviacion_vary))
library(MASS)
summary(Cars93)
print(Cars93$Weight)
ggplot(Cars93, aes(y = Weight)) +
geom_boxplot() +
labs(title = "Boxplot de varx", y = "Valores")
summary(Cars93)
View(data)
summary(Cars93)
Cars93
a <- Cars93
View(a)
ggplot(Cars93, aes(y = Weight)) +
geom_boxplot() +
labs(title = "Boxplot de varx", y = "Valores")
problema <- c(4,3,1,6,7,8,5,5,6)
print(var(problema))
print(sd(problema))
datos <- c(85, 37, 48, 64, 73, 54, 104, 92, 85, 95)
# Calcular la media geométrica
media_geometrica <- prod(datos)^(1/length(datos))
# Imprimir la media geométrica
print(media_geometrica)
#Ruta donde se encuentran nuestros archivos
datos_sen <- read.csv("SEN_2024.csv", sep = ",", header = TRUE) #leemos el archivo de diputaciones
#En este archivo haremos el proceso de la base de datos
setwd("C:/Users/ferna/Documents/Estadisitica_2/Data/Elecciones/Data")
load_libraries  <- function(paquete){ #Funcion para cargar las librerias y ejecutarlas
if(!require(paquete, character.only = TRUE)){
install.packages(paquete)
} # nolint
library(paquete, character.only = TRUE)
}
#Cargamos las librerias
load_libraries("ggplot2")
load_libraries("gapminder")
load_libraries("dplyr")
#Ruta donde se encuentran nuestros archivos
datos_sen <- read.csv("SEN_2024.csv", sep = ",", header = TRUE) #leemos el archivo de diputaciones
datos_indicadores <- read.csv("indicadores.csv", header = TRUE, sep = ",") #leemos el archivo de indicadores
#Primer filtro para seleccionar las columans que nos interesan
datos_sen_selec <- datos_sen %>% select("ID_DISTRITO_FEDERAL", "PAN","PRI","PRD","PVEM","PT","MC","MORENA","PAN.PRI.PRD","PAN.PRI","PAN.PRD","PRI.PRD","PVEM_PT_MORENA","PVEM_PT","PVEM_MORENA","PT_MORENA","TOTAL_VOTOS_CALCULADO")
#Visualizamos los datos
#print(head(datos_indicadores))
#print(head(datos_diputacines))
View(datos_sen_selec)
View(datos_sen)
