#Usa residuales studentilizados
library(lmtest)
lmtest::bptest(fit)
#Usa residuales estandarizados
library(car)
car::ncvTest(fit)
summary(Datos$nassets)
#### Uso de transformaciones Box-Cox
#### Función powerTransform del paquete car
#### Cuando la variable "y" es estrictamente positiva
#Se prefiere un valor de lambda conocido para no complicar mucho la interpretaci?n
summary(powerTransform(fit))
#El intervalo sugiere que lambda=.2 podría ser una opción (notar que se rechaza lambda=0 y 1)
Datos$nassets_lambda0=bcPower(Datos$nassets, .2)
Datos$nassetsBC=(Datos$nassets^(.2)-1)/.2
par(mar=c(4, 5, 1, 1))
par(mfrow=c(1,1))
plot(Datos$stfees, Datos$nassetsBC, xlab = TeX("$stfees$"), ylab=TeX("$(y^{.2}-1)/.2$") )
fit2=lm(nassetsBC~stfees, data=Datos)
summary(fit2)
par(mfrow=c(1,1))
par(mar=c(4, 5, 1, 1))
plot(fit2, 3)
lmtest::bptest(fit2)
car::ncvTest(fit2)
summary(powerTransform(fit2))
#Para datos negativos o con ceros se puede usar una constante gamma positiva para trabajar con valores positivos
#powerTransform(,  family="bcnPower")
summary(powerTransform(fit,  family="bcnPower"))
Datos$nassetsBCalt=bcnPower(Datos$nassets, lambda=0, gamma=16677.21)
fit3=lm(nassetsBCalt~stfees, data=Datos)
plot(Datos$stfees, Datos$nassetsBCalt, xlab = TeX("$stfees$"), ylab=TeX("$ln(z)$") )
plot(fit3, 3)
lmtest::bptest(fit3)
car::ncvTest(fit3)
#Una opción alternativa es transformar los datos sumandole la constante positiva antes de usar la transformación BoxCox simple
# Nota. En este modelo se puede presentar como resultado
# una gráfica con el ajuste del modelo, pero para facilidad del usuario
# en la escala original, que corresponde a la mediana, Med(y;x)
par(mfrow=c(1,2))
par(mar=c(4, 5, 1, 1))
fit2yprima <- function(X2) {fit2$coef[1]+ fit2$coef[2]*X2}
fit2y <- function(X2) {((fit2$coef[1]+ fit2$coef[2]*X2)*.2+1)^5}
# En la escala transformada la curva (recta) corresponde
# a la estimación de E(y*;x)=Med(y*;x)
plot(Datos$stfees,Datos$nassetsBC, xlab = TeX("$stfees$"), ylab=TeX("$y^{*}$") )
curve(fit2yprima, from = min(Datos$stfees), to = max(Datos$stfees),
col = "red", add = T)
# En la escala original la curva corresponde
# a la estimación de Med(y;x)
plot(Datos$stfees, Datos$nassets, xlab = TeX("$stfees$"), ylab=TeX("$nassets$") )
curve(fit2y, from = min(Datos$stfees), to = max(Datos$stfees),
col = "red", add = T)
#Problema 6 de los Pinguinos, echo por: Fernando Alvarado Palacios
require(dplyr)
#Limpiando la consola para poder trabajar mejor
rm(list = ls(all.names = TRUE))
gc()
#Datos sobre los pinguinos
x = c(79, 93, 100, 105, 85, 101, 96, 96, 109, 70, 71, 87)
y = c(119, 142, 158, 157, 136, 151, 139, 142, 165, 117, 123, 130)
Datos6 = data.frame(cbind(x, y))
kable(t(Datos6)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
require(dplyr)
library(kableExtra)
install.packages("kableExtra")
require(dplyr)
library(kableExtra)
#Limpiando la consola para poder trabajar mejor
rm(list = ls(all.names = TRUE))
gc()
#Datos sobre los pinguinos
x = c(79, 93, 100, 105, 85, 101, 96, 96, 109, 70, 71, 87)
y = c(119, 142, 158, 157, 136, 151, 139, 142, 165, 117, 123, 130)
Datos6 = data.frame(cbind(x, y))
kable(t(Datos6)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
#Ajusstando el modelo de regresion lineal
print(Datos6)
modelo = lm(y ~ x, data = Datos6)
fit(modelo)
#Ajusstando el modelo de regresion lineal
modelo = lm(y ~ x, data = Datos6)
summary(modelo)
modelo = lm(y ~ x, data = Datos6)
summary(modelo)
#-- Con este primer vistazo podemos observar que si tienen relacion las variables x, y en el modelo de regresion lineal
#Graficando el modelo de regresion lineal
ggplot(Datos6, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Modelo de regresion lineal",
x = "x peso del huevo menor",
y = "y peso del huevo mayor") +
theme_minimal()
library(ggplot2)
modelo = lm(y ~ x, data = Datos6)
summary(modelo)
#-- Con este primer vistazo podemos observar que si tienen relacion las variables x, y en el modelo de regresion lineal
#Graficando el modelo de regresion lineal
ggplot(Datos6, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Modelo de regresion lineal",
x = "x peso del huevo menor",
y = "y peso del huevo mayor") +
theme_minimal()
plot(modelo, 3)
bptest(modelo)
lmtest::bptest(modelo)
plot(modelo, 1)
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=modelo)
library(car) # checar linealidad
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=modelo)
#Librerias necesarias para el ejercicio
library(dplyr)
library(kableExtra)
library(ggplot2)
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
plot(modelo, 1)
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=modelo)
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=Datos6) #No pongas el modelo, si no los datos
#Problema 6 de los Pinguinos, echo por: Fernando Alvarado Palacios
#Librerias necesarias para el ejercicio
library(dplyr)
library(kableExtra)
library(ggplot2)
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
#Limpiando la consola para poder trabajar mejor
rm(list = ls(all.names = TRUE))
gc()
#Datos sobre los pinguinos
x = c(79, 93, 100, 105, 85, 101, 96, 96, 109, 70, 71, 87)
y = c(119, 142, 158, 157, 136, 151, 139, 142, 165, 117, 123, 130)
Datos6 = data.frame(cbind(x, y))
kable(t(Datos6)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
#Ajusstando el modelo de regresion lineal
modelo = lm(y ~ x, data = Datos6)
summary(modelo)
#-- Con este primer vistazo podemos observar que si tienen relacion las variables x, y en el modelo de regresion lineal
#Graficando el modelo de regresion lineal
grafica_modelo = function(varx) {
ggplot(Datos6, aes(x = varx, y = y)) + #Creando la grafica de nuetra regresion lineal, agustado con los datos de los pinguinos
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Modelo de regresion lineal",
x = "x peso del huevo menor",
y = "y peso del huevo mayor") +
theme_minimal()
}
grafica_modelo(x)
#Verificando si se cumplen los supuestos del modelo de regresion lineal
#Checando  homocedasticidad por medio de la grafica propia de R
plot(modelo, 3)#Checar homocedasticidad, por defecto en R
#Aplicando la una prueba de hipotesis para la homocedasticidad
lmtest::bptest(modelo)
#-- Con esta prueba de Hipoteis como nuestro p-value es 0.5036, podemos concluir que tenemos homocedasticidad
#Checando linealidad  por medio de la grafica de R
plot(modelo, 1)#Checar linealidad, por defecto en R
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=Datos6) #No pongas el modelo, si no los datos
#-- Con esta prueba podemos observar que es necesrio hacer una transformacion de los datos
#Ajustando nuestro modelo de Regresion Lineal con una transformacion
lambda <- boxTidwell_result$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
summary(modelo_transformado) #Checando el resumen del modelo
#Volciendo a hacer el modelo de regresion
modelo_transformado = lm(y ~ x_transformed, data = Datos6)
lambda <- boxTidwell_result$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
lambda <- boxTidwell_result$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
library(dplyr)
library(kableExtra)
library(ggplot2)
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
library(dplyr)
library(kableExtra)
library(ggplot2)
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
#Limpiando la consola para poder trabajar mejor
rm(list = ls(all.names = TRUE))
gc()
#Datos sobre los pinguinos
x = c(79, 93, 100, 105, 85, 101, 96, 96, 109, 70, 71, 87)
y = c(119, 142, 158, 157, 136, 151, 139, 142, 165, 117, 123, 130)
Datos6 = data.frame(cbind(x, y))
kable(t(Datos6)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
#Ajusstando el modelo de regresion lineal
modelo = lm(y ~ x, data = Datos6)
summary(modelo)
#-- Con este primer vistazo podemos observar que si tienen relacion las variables x, y en el modelo de regresion lineal
#Graficando el modelo de regresion lineal
grafica_modelo = function(varx) {
ggplot(Datos6, aes(x = varx, y = y)) + #Creando la grafica de nuetra regresion lineal, agustado con los datos de los pinguinos
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Modelo de regresion lineal",
x = "x peso del huevo menor",
y = "y peso del huevo mayor") +
theme_minimal()
}
grafica_modelo(x)
plot(modelo, 3)#Checar homocedasticidad, por defecto en R
lmtest::bptest(modelo)
plot(modelo, 1)#Checar linealidad, por defecto en R
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
boxTidwell(y~x, data=Datos6) #No pongas el modelo, si no los datos
lambda <- boxTidwell_result$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
#-- Con esta grafica podemos observar que no se esta cumpliendo el supuesto de linealidad, por lo que tendremso que hacer una transformacion de los datos
#-- # se va a hacer a partir de la familia de transformaciones Box-Tidwell
pruebaBox_Tid <- boxTidwell(y~x, data=Datos6) #No pongas el modelo, si no los datos
pruebaBox_Tid
lambda <- pruebaBox_Tid$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
Datos6$x_transformed <- Datos$x^lambda    # Aplicar la transformación
#Volciendo a hacer el modelo de regresion
modelo_transformado = lm(y ~ x_transformed, data = Datos6)
Datos6$x_transformed <- Datos6$x^lambda    # Aplicar la transformación
Datos6$x_transformed <- Datos6$x^lambda    # Aplicar la transformación
lambda
pruebaBox_Tid
lambda <- pruebaBox_Tid$estimate[0]  # Extraer el valor de lambda de la prueba de Box-Tidwell
lambda
lambda <- pruebaBox_Tid$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
lambda <- pruebaBox_Tid$lambda  # Extraer el valor de lambda de la prueba de Box-Tidwell
lambda
lambda <- pruebaBox_Tid$estimate[1]  # Extraer el valor de lambda de la prueba de Box-Tidwell
lambda
lambda <- 3.603
Datos6$x_transformed <- Datos6$x^lambda    # Aplicar la transformación
Datos6
modelo_transformado = lm(y ~ x_transformed, data = Datos6)
summary(modelo_transformado) #Checando el resumen del modelo
grafica_modelo(x_transformed) #Graficando el modelo de regresion lineal transformado
Datos6
#Volciendo a hacer el modelo de regresion
modelo_transformado = lm(y ~ x_transformed, data = Datos6)
summary(modelo_transformado) #Checando el resumen del modelo
grafica_modelo(Datos6$x_transformed) #Graficando el modelo de regresion lineal transformado
# Regresi?n lineal m?ltiple
# Ajuste e interpretaci?n
############################################
# ANCOVA caso 2. Sin igualdad de pendientes.
############################################
rm(list = ls(all.names = TRUE))
gc()
getwd()
setwd("C://Users//ferna//Documents//Estadisitica_2//-Linear-Regression-Code//Multiplr")#Modificar esta linea en caso de que no se encuentre en la misma carpeta
#Cargando los datos
Datos=read.csv("./ejemplo3RLM.csv", header=TRUE )
depression <- read.table("depression.txt", header=TRUE )
str(depression)
depression$TRT=factor(depression$TRT)
fit <- lm(y ~ age * TRT, data = depression) #--------------------------------------------------------------------- Pregunta si el nivel de referecia influye en la respuesta dle modelo
summary(fit)
levels(depression$TRT)
fit <- lm(y ~ age * TRT, data = depression) #--------------------------------------------------------------------- Pregunta si el nivel de referecia influye en la respuesta dle modelo
summary(fit)
modelo2 <- lm( Puntaje~Trat*Sexo , data = data)
rm(list = ls(all.names = TRUE))
gc()
#Librerias necesarias para el ejercicio
library(kableExtra)
library(ggplot2) #Graficar
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
library(broom) # checar normalidad y calcular residuales
library(lawstat) #libreria para checar aleatoriedad
library(tidyverse) #Libreria para hacer la manipulacion de los datos
library(dplyr) #Meanejo de datos
library(multcomp) #Libreria para hacer pruebas de hipotesis muiltiples
library(GGally) #Libreria para hacer graficas un poco mas conpleas, para relacionar varias variables a la vez
getwd()
setwd("C://Users//ferna//Documents//Estadisitica_2//Data//Proyecto_2//Ejercicio_4")#Modificar esta linea en caso de que no se encuentre en la misma carpeta
#Cargando los datos con los que vamos a trabajar
data = read.csv("./Ex4A.csv") #Archivo CSV con los datos de la ansiedad
summary(data) #Cargando una vista previa de nuestros datos
#Transformando la variables al tipo factor
data$Sexo = factor(data$Sexo)
data$Trat = factor(data$Trat)
getwd()
setwd("C://Users//ferna//Documents//Estadisitica_2//Data//Proyecto_2//Ejercicio_4")#Modificar esta linea en caso de que no se encuentre en la misma carpeta
#Cargando los datos con los que vamos a trabajar
data = read.csv("./Ex4A.csv") #Archivo CSV con los datos de la ansiedad
summary(data) #Cargando una vista previa de nuestros datos
#Transformando la variables al tipo factor
data$Sexo = factor(data$Sexo)
data$Trat = factor(data$Trat)
modelo <- lm( Puntaje~ Sexo*Trat , data = data)
summary(modelo) #veamos nuestro resumen del modelo de regresion lineal
modelo2 <- lm( Puntaje~Trat*Sexo , data = data)
anova(modelo, modelo2)
View(data)
K4 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow = 2, byrow = TRUE)
summary(glht(modelo, linfct = K4, rhs = m_2), test= Ftest())
m_2=c(0,0)
m_1 =c(0)
m_3 = c(0,0,0)
K4 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow = 2, byrow = TRUE)
summary(glht(modelo, linfct = K4, rhs = m_2), test= Ftest())
K4_2 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,0,1,-1), ncol=6, nrow = 3, byrow = TRUE)
summary(glht(modelo, linfct = K4_2, rhs = m_3))
rm(list = ls(all.names = TRUE))
gc()
# E(y;x)= b0 + b1 age + b2 TRTB + b3 TRTC + b4(age*TRTB) + b5(age*TRTC)
fit <- lm(y ~ age * TRT, data = depression) #--------------------------------------------------------------------- Pregunta si el nivel de referecia influye en la respuesta dle modelo
Datos=read.csv("./ejemplo3RLM.csv", header=TRUE )
getwd()
setwd("C://Users//ferna//Documents//Estadisitica_2//-Linear-Regression-Code//Multiplr")#Modificar esta linea en caso de que no se encuentre en la misma carpeta
#Cargando los datos
Datos=read.csv("./ejemplo3RLM.csv", header=TRUE )
depression <- read.table("depression.txt", header=TRUE )
str(depression)
fit <- lm(y ~ age * TRT, data = depression) #--------------------------------------------------------------------- Pregunta si el nivel de referecia influye en la respuesta dle modelo
summary(fit)
library(multcomp)
K=matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fit, linfct=K, rhs=m), test=Ftest())
K=matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,0,1,-1), ncol=6, nrow=3, byrow=TRUE)
m=c(0,0,0)
summary(glht(fit, linfct=K, rhs=m))
rm(list = ls(all.names = TRUE))
gc()
#Librerias necesarias para el ejercicio
library(kableExtra)
library(ggplot2) #Graficar
library(lmtest) # checar homocedasticidad
library(car) # checar linealidad
library(broom) # checar normalidad y calcular residuales
library(lawstat) #libreria para checar aleatoriedad
library(tidyverse) #Libreria para hacer la manipulacion de los datos
library(dplyr) #Meanejo de datos
library(multcomp) #Libreria para hacer pruebas de hipotesis muiltiples
library(GGally) #Libreria para hacer graficas un poco mas conpleas, para relacionar varias variables a la vez
#Estableciendo el directorio de trabajo
getwd()
setwd("C://Users//ferna//Documents//Estadisitica_2//Data//Proyecto_2//Ejercicio_4")#Modificar esta linea en caso de que no se encuentre en la misma carpeta
#Cargando los datos con los que vamos a trabajar
data = read.csv("./Ex4A.csv") #Archivo CSV con los datos de la ansiedad
summary(data) #Cargando una vista previa de nuestros datos
#Transformando la variables al tipo factor
data$Sexo = factor(data$Sexo)
data$Trat = factor(data$Trat)
modelo <- lm( Puntaje~ Sexo*Trat , data = data)
summary(modelo) #veamos nuestro resumen del modelo de regresion lineal
m_2=c(0,0)
m_1 =c(0)
m_3 = c(0,0,0)
K4 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow = 2, byrow = TRUE)
summary(glht(modelo, linfct = K4, rhs = m_2), test= Ftest())
K4_2 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,0,1,-1), ncol=6, nrow = 3, byrow = TRUE)
summary(glht(modelo, linfct = K4_2, rhs = m_3))
boxplot(Puntaje ~ Trat * Sexo, data = data,#Un consejo a a la hora de correr esta grafica es que la hagan mas grande, ya que quita los labs del eje x, por que no caben todos y se hace un poco complicado de interpretar
main = "Boxplot de  Tratamiento, Sexo vs Puntaje Depresion",
xlab = "Tratamiento y Sexo",
ylab = "Puntaje de Depresión",
col = c("lightblue", "lightgreen"))
K4_2 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,0,1,-1), ncol=6, nrow = 3, byrow = TRUE)
summary(glht(modelo, linfct = K4_2, rhs = m_3))
#Con esta prueba podemos identificar que B5 no es diferente de 0, lo que implica que podrian existir ciertas relaciones entre los tratamientos
# Puntaje = B0 + B1*Y_m + B2*X_t1 +B3*X_t2 + b4*Y_m*X_t1 + B5*Y_m*X_t2
modelo_reducido2 <- lm(Puntaje ~  Trat +I((Trat == 'Trat2')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido2)
summary(modelo)
modelo_reducido2 <- lm(Puntaje ~  Trat +I((Trat == 'Trat2')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido2)
summary(modelo)
modelo_reducido2 <- lm(Puntaje ~  Sexo + Trat +I((Trat == 'Trat2')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido2)
# Puntaje = B0 + B1*Y_m + B2*X_t1 +B3*X_t2 + b4*Y_m*X_t1 + B5*Y_m*X_t2
summary(modelo)
modelo_reducido2 <- lm(Puntaje ~  Sexo + Trat +I((Trat == 'Trat1')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido2)
modelo_reducido <- lm(Puntaje ~  Trat +I((Trat == 'Trat2')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido)
# Puntaje = B0 + B1*Y_m + B2*X_t1 +B3*X_t2 + b4*Y_m*X_t1 + B5*Y_m*X_t2
summary(modelo)
summary(modelo_reducido2)
anova(modelo_reducido, modelo) #Esta curioso, me dio que el modelo original es mejor que el modelo reducido
summary(modelo_reducido)
K4 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow = 2, byrow = TRUE)
summary(glht(modelo, linfct = K4, rhs = m_2), test= Ftest())
K4_2 = matrix(c(0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,0,1,-1), ncol=6, nrow = 3, byrow = TRUE)
summary(glht(modelo, linfct = K4_2, rhs = m_3))
modelo_reducido <- lm(Puntaje ~  Sexo + Trat +I((Trat == 'Trat1')*(Sexo == 'Mujer')), data = data)
summary(modelo_reducido)
data$Predicciones <- predict(modelo)
# Crear el gráfico
ggplot(data, aes(x = Trat, y = Predicciones, color = Sexo, group = Sexo)) +
stat_summary(fun = mean, geom = "line", size = 1.2) +  # Líneas de medias por Sexo
stat_summary(fun = mean, geom = "point", size = 3) +  # Puntos de medias por Sexo
labs(title = "Gráfico de Interacción: Sexo y Tratamiento",
x = "Tratamiento",
y = "Puntaje promedio predicho") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Mejora estética con colores
k_6 =matrix(c(0,0,-1,1,-1,1,
0,0,0,1,0,1,
0,0,-1,1,0,0,
0,0,0,1,0,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_6 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
k_7 =matrix(c(0,0,1,-1,0,0,
0,0,1,0,0,0,
0,0,1,-1,1,-1,
0,0,1,0,1,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_7 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
library(multcomp)
# Matriz de restricciones para H0
k_7 <- matrix(c(0, 0, 1, -1, 0, 0,  # B2 - B3 <= 0
0, 0, 1,  0, 0, 0,  # B2 <= 0
0, 0, 1,  1, -1, -1, # B2 + B4 - B3 - B5 <= 0
0, 0, 1,  0, 1, 0), # B2 + B4 <= 0
ncol = 6, nrow = 4, byrow = TRUE)
# Realizar la prueba de hipótesis
resultado <- summary(glht(modelo, linfct = k_7, rhs = c(0, 0, 0, 0),
alternative = "greater", test = Ftest()))
library(multcomp)
k_7 <- matrix(c(0, 0, 1, -1, 0, 0,  # B2 - B3 <= 0
0, 0, 1,  0, 0, 0,  # B2 <= 0
0, 0, 1,  1, -1, -1, # B2 + B4 - B3 - B5 <= 0
0, 0, 1,  0, 1, 0), # B2 + B4 <= 0
ncol = 6, nrow = 4, byrow = TRUE)
# Realizar la prueba de hipótesis
resultado <- summary(glht(modelo, linfct = k_7, rhs = c(0, 0, 0, 0),
alternative = "greater", test = Ftest()))
summary(glht(modelo, linfct = k_7, rhs = c(0, 0, 0, 0),
alternative = "greater", test = Ftest()))
k_8 = matrix(c(0, 0, 1, -1, 0, 0,  # B2 - B3 <= 0
0, 0, 1,  0, 0, 0,  # B2 <= 0
0, 0, 1,  1, -1, -1, # B2 + B4 - B3 - B5 <= 0
0, 0, 1,  0, 1, 0), # B2 + B4 <= 0
ncol = 6, nrow = 4, byrow = TRUE)
# Realizar la prueba de hipótesis
summary(glht(modelo, linfct = k_8, rhs = c(0, 0, 0, 0),
alternative = "greater", test = Ftest()))
summary(glht(modelo, linfct =k_7 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
# Realizar la prueba de hipótesis
summary(glht(modelo, linfct = k_8, rhs = c(0, 0, 0, 0)),alternative = "greater", test = Ftest()))
# Realizar la prueba de hipótesis
summary(glht(modelo, linfct = k_8, rhs = c(0, 0, 0, 0)),alternative = "greater", test = Ftest())
summary(glht(modelo, linfct =k_7 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
# Realizar la prueba de hipótesis
summary(glht(modelo, linfct = k_8, rhs = c(0, 0, 0, 0)),alternative = "greater", test = Ftest())
#6) Prueba de Hipotesis,  Nuevo tratameinto (Tratamiendo 2), tiene un mejor desempeño (a esto me refiero de que el medicamento baje los niveles de ansiedad en los pacientes)
#Haciendo la prueba de hip
#E(puntaje;Trat = Trat2,Sexo = h) <= E(puntaje;Trat = Trat1,Sexo = h) y  E(puntaje;Trat = Trat2,Sexo = h) <= E(puntaje;Trat = Control,Sexo = h) ^
#E(puntaje;Trat = Trat2,Sexo = m) <= E(puntaje;Trat = Trat1,Sexo = m) y  E(puntaje;Trat = Trat2,Sexo = m) <= E(puntaje;Trat = Control,Sexo = m)
# Ho: B3+B5-B2-B4<=0
#     B3+B5<=0
#     B3-B2<=0
#     B3<=0
k_6 =matrix(c(0,0,-1,1,-1,1,
0,0,0,1,0,1,
0,0,-1,1,0,0,
0,0,0,1,0,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_6 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
k_6 =matrix(c(0,0,-1,1,-1,1,
0,0,0,1,0,1,
0,0,-1,1,0,0,
0,0,0,1,0,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_6 , rhs = c(0,0,0,0)), alternative = "greater")
k_6 =matrix(c(0,0,-1,1,-1,1,
0,0,0,1,0,1,
0,0,-1,1,0,0,
0,0,0,1,0,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_6 , rhs = c(0,0,0,0)), alternative = "less")
#E(puntaje;Trat = Trat2,Sexo = h) <= E(puntaje;Trat = Trat1,Sexo = h) y  E(puntaje;Trat = Trat2,Sexo = h) <= E(puntaje;Trat = Control,Sexo = h) ^
#E(puntaje;Trat = Trat2,Sexo = m) <= E(puntaje;Trat = Trat1,Sexo = m) y  E(puntaje;Trat = Trat2,Sexo = m) <= E(puntaje;Trat = Control,Sexo = m)
# Ho: B3+B5-B2-B4<=0
#     B3+B5<=0
#     B3-B2<=0
#     B3<=0
k_6 =matrix(c(0,0,-1,1,-1,1,
0,0,0,1,0,1,
0,0,-1,1,0,0,
0,0,0,1,0,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_6 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
k_7 =matrix(c(0,0,1,-1,0,0,
0,0,1,0,0,0,
0,0,1,-1,1,-1,
0,0,1,0,1,0), ncol=6, nrow = 4, byrow = TRUE)
summary(glht(modelo, linfct =k_7 , rhs = c(0,0,0,0)), alternative = "greater", test = Ftest())
